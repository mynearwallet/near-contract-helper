name: Deploy to Amazon ECS

on:
  push:
    branches:
      - mainnet
  pull_request:
    branches:
      - mainnet
    types: [closed]

env:
  AWS_REGION: ${{ secrets.AWS_REGION }}     # set this to your preferred AWS region, e.g. us-west-1
  ECR_REPOSITORY: ${{ secrets.AWS_ECR_REPOSITORY }}
  ECS_SERVICE: ${{ secrets.ECS_SERVICE_M }}  
  ECS_CLUSTER: ${{ secrets.ECS_CLUSTER_M }} 
  CONTAINER_NAME: ${{ secrets.CONTAINER_NAME_M }}


jobs:
  deploy:
    name: Deploy
    runs-on: ubuntu-latest
    environment: staging

    steps:

      - name: Checkout
        uses: actions/checkout@v2

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          role-to-assume: ${{ secrets.AWS_ASSUMED_ROLE_M }}
          aws-region: ${{ env.AWS_REGION }}
          #need to add sts:TagSession to role
          role-skip-session-tagging: true
          role-duration-seconds: 1200
      
      
      - name: Configure env INDEXER_DB_REPLICAS
        uses: 'marvinpinto/action-inject-ssm-secrets@v1.2.1'
        with:
          ssm_parameter: '/mynearwallet/indexer_db_urls_mainnet'
          env_variable_name: 'INDEXER_DB_REPLICAS'

      - name: Configure env INDEXER_DB_CONNECTION
        uses: 'marvinpinto/action-inject-ssm-secrets@v1.2.1'
        with:
          ssm_parameter: '/mynearwallet/indexer_db_connection_mainnet'
          env_variable_name: 'INDEXER_DB_CONNECTION'

      - name: prepare env
        run: cp .env.sample .env  && env | grep -i indexer >> .env 
  
      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Set docker image name
        id: image-name
        env:
          REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          REPOSITORY: ${{ secrets.AWS_ECR_REPOSITORY }}
          IMAGE_TAG: ${{ github.sha }}
        run: |
          echo "::set-output name=image::$REGISTRY/$REPOSITORY:$IMAGE_TAG"
          
      - name: Build and push docker image
        run: |
          docker build -t ${{ steps.image-name.outputs.image }} .
          docker push ${{ steps.image-name.outputs.image }}

      - name: Download task definition
        if: ${{ github.event.pull_request.merged }}       
        run: |
         aws ecs describe-task-definition --task-definition ${{ secrets.TASK_DEFINITION_M }} --region ${{ secrets.AWS_REGION }} --query taskDefinition | jq -r 'del(
           .taskDefinitionArn,
           .requiresAttributes,
           .compatibilities,
           .revision,
           .status,
           .registeredAt,
           .registeredBy
         )' > task-definition.json

      - name: Fill in the new image ID in the Amazon ECS task definition
        if: ${{ github.event.pull_request.merged }}
        id: task-def
        uses: aws-actions/amazon-ecs-render-task-definition@v1
        with:
          task-definition: task-definition.json
          container-name: ${{ env.CONTAINER_NAME }}
          image:  ${{ steps.image-name.outputs.image }}


      - name: Deploy Amazon ECS task definition
        if: ${{ github.event.pull_request.merged }}       
        uses: aws-actions/amazon-ecs-deploy-task-definition@v1
        with:
          task-definition: ${{ steps.task-def.outputs.task-definition }}
          service: ${{ env.ECS_SERVICE }}
          cluster: ${{ env.ECS_CLUSTER }}
          wait-for-service-stability: true
