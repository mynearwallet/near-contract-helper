name: Deploy to Amazon ECS

on:
  push:
    branches:
      - cicd

env:
  AWS_REGION: us-west-2                   # set this to your preferred AWS region, e.g. us-west-1
  ECR_REPOSITORY: ${{ secrets.AWS_ECR_REPOSITORY }}
  ECS_SERVICE: testnet-staging-indexer-service
  ECS_CLUSTER: testnet-staging-cluster
  ECS_TASK_DEFINITION: ./ecs/indexer.container-definition.json
  CONTAINER_NAME: testnet-staging-indexer-container
                                               

jobs:
  deploy:
    name: Deploy
    runs-on: ubuntu-latest
    environment: production
    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          role-to-assume: ${{ secrets.AWS_ASSUMED_ROLE }}
          aws-region: ${{ env.AWS_REGION }}
          #need to add sts:TagSession to role
          role-skip-session-tagging: true
          role-duration-seconds: 1200


      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1
 
      - name: AWS ECR
      # You may pin to the exact commit or the version.
      # uses: kciter/aws-ecr-action@79255b7c5aa03dbf6d7c46cff2bfd049874cd98d
        uses: kciter/aws-ecr-action@v4
        with:
        # The AWS access key id
          access_key_id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        # The AWS secret access key
          secret_access_key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        # AWS Account ID
          account_id: 465147140601
        # A role to assume under the account_id account.
        # assume_role: # optional, default is 
        # Name of your ECR repository
          repo: ${{ env.ECR_REPOSITORY }}
        # The AWS region
          region: ${{ env.AWS_REGION }}
        # Set this to true to create the repository if it does not already exist
        # create_repo: # optional
        # Set this to true to set a policy on the repository
        # set_repo_policy: # optional
        # Set this to repository policy statement json file. only used if the set_repo_policy is set to true
        # repo_policy_file: # optional, default is repo-policy.json
        # Comma-separated string of ECR image tags
          tags: ${{ github.sha }}
        # Name of Dockerfile to use
        # dockerfile: # optional, default is Dockerfile
        # Extra flags to pass to docker build (see docs.docker.com/engine/reference/commandline/build)
        # extra_build_args: # optional, default is 
        # Images to use as cache for the docker build (see `--cache-from` argument docs.docker.com/engine/reference/commandline/build)
        # cache_from: # optional, default is 
        # Path to Dockerfile, defaults to the working directory
        # path: # optional, default is .
        # Relative path from top-level to script to run before Docker build
        # prebuild_script: # optional
 


#       - name: Fill in the new image ID in the Amazon ECS task definition
#         id: task-def
#         uses: aws-actions/amazon-ecs-render-task-definition@v1
#         with:
#           task-definition: ${{ env.ECS_TASK_DEFINITION }}
#           container-name: ${{ env.CONTAINER_NAME }}
#           image: ${{ steps.image-name.outputs.image }}


#       - name: Deploy Amazon ECS task definition
#         uses: aws-actions/amazon-ecs-deploy-task-definition@v1
#         with:
#           task-definition: ${{ steps.task-def.outputs.task-definition }}
#           service: ${{ env.ECS_SERVICE }}
#           cluster: ${{ env.ECS_CLUSTER }}
#           wait-for-service-stability: true
