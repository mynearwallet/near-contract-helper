name: Deploy to Amazon ECS

on:
  push:
    branches:
      - cicd

env:
  AWS_REGION: us-west-2                   # set this to your preferred AWS region, e.g. us-west-1
  ECR_REPOSITORY: ${{ secrets.AWS_ECR_REPOSITORY }}
  ECS_SERVICE: testnet-staging-indexer-service
  ECS_CLUSTER: testnet-staging-cluster
  ECS_TASK_DEFINITION: ./ecs/indexer.container-definition.json
  CONTAINER_NAME: testnet-staging-indexer-container
                                               

jobs:
  deploy:
    name: Deploy
    runs-on: ubuntu-latest
    environment: staging

    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          role-to-assume: ${{ secrets.AWS_ASSUMED_ROLE }}
          aws-region: ${{ env.AWS_REGION }}
          #need to add sts:TagSession to role
          role-skip-session-tagging: true
          role-duration-seconds: 1200


      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Declare some variables
        id: vars
        shell: bash
        run: |
          echo "##[set-output name=branch;]$(echo ${GITHUB_REF#refs/heads/})"
          echo "::set-output name=sha_short::$(git rev-parse --short HEAD)"

      - name: Extract Docker metadata
        id: meta
        uses: docker/metadata-action@v3
        with:
          images: ${{ steps.login-ecr.outputs.registry }}
          tags: |
            ${{ steps.vars.outputs.sha_short }}
            type=ref,event=branch
            
      - name: Build and push Docker image
        uses: docker/build-push-action@v2
        with:
          context: .
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          file: Dockerfile


#       - name: Set docker image name
#         id: image-name
#         env:
#           REGISTRY: ${{ steps.login-ecr.outputs.registry }}
#           REPOSITORY: ${{ secrets.AWS_ECR_REPOSITORY }}
#           IMAGE_TAG: ${{ github.sha }}
#         run: |
#           echo "::set-output name=image::$REGISTRY/$REPOSITORY:$IMAGE_TAG"

#       - name: Build and push docker image
#         run: |
#           docker build -t ${{ steps.image-name.outputs.image }} .
#           docker push ${{ steps.image-name.outputs.image }}

#       - name: Fill in the new image ID in the Amazon ECS task definition
#         id: task-def
#         uses: aws-actions/amazon-ecs-render-task-definition@v1
#         with:
#           task-definition: ${{ env.ECS_TASK_DEFINITION }}
#           container-name: ${{ env.CONTAINER_NAME }}
#           image: ${{ steps.image-name.outputs.image }}


#       - name: Deploy Amazon ECS task definition
#         uses: aws-actions/amazon-ecs-deploy-task-definition@v1
#         with:
#           task-definition: ${{ steps.task-def.outputs.task-definition }}
#           service: ${{ env.ECS_SERVICE }}
#           cluster: ${{ env.ECS_CLUSTER }}
#           wait-for-service-stability: true
